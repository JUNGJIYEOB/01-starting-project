<컨벤션>
1.React 컨벤션
		+> 컴포넌트는 대문자로 시작 해야 함수
		+> 함수에서 렌더링 가능한 값이 반환되어야 함
		+> 한 파일에 컨포넌트가 많을 수록 찾기도 어려워지고 무거워짐
			++>두 개의 컴포넌트의 연관성이 매우 높거나 둘이 함께 있어야 작동하는 경우는 예외
<CSS>
컴포넌트별 css 파일로 구분을 하면 어떤 스타일이 어떤 컴포넌트에 적용되는지 구분하는 것과 스타일을 조정하는 것이 훨신 용이함
스타일의 범위를 설정하는 것 차후 기재


<리엑트 이론>
1.개발자의 관점에서: 컴포넌트를 조합하여 UI를 구축하는 것에 대한 장점 중 하나는 무엇입니까?
	+> 작고 재사용 가능한 빌딩 블록
	
2.리액트로 작업할 때: 어떻게 새로운 컴포넌트를 정의합니까?
	+> JSX 코드를 반환하는 함수를 생성한다.
	
3.JSX 목적은 무엇인가?
	+> 컴포넌트 내 타겟 HTML 코드를 정의할 수 있도록 합니다.
	
4.리액트는 JSX 코드에서 사용한 컴포넌트로 하는 일은 무엇입니까?
	+> 웹사이트 DOM을 업데이트할 명령어를 수행하는 컴포넌트 트리를 불러온다

5.커스텀 컴포넌트는 주로 어떻게 사용됩니까?
	+> 커스텀 컴포넌트는 JSX 코드 내 HTML 요소처럼 사용된다.
	
6.커스텀 컴포넌트에 대한 설명
	+>커스텀 컴포넌트는 자바스크립트 함수로 생성될 수 있다.
	+> JSX에서 커스텀 컴포넌트를 사용하려면, 첫 무자가 대문자여야 한다.
	+> 커스텀 컴포넌트는 무조건 렌더링할 수 있는 내용을 반환해야 한다.(주로JSX)

7.“children” Prop(속성)의 목적은 무엇입니까?
	+> 열림과 닫힘 태그 사이에 있는 내용을 전달하고 사용하는 데 사용한다.

8.기본적으로 리엑트는 컴포넌트 함수를 코드 내에서 처음 발견했을 때 한 번밖에 실행하지 않음

9. State(상태)관리 & Hook(훅) 사용법
	State> 리엑트에서 처리되는 변수를 등록하는 것이며 , 리엑트가 제공하는 함수의 도움을 받아  업데이트 됨.
			또한 리엑트에게 데이터가 변한 것을 알려주면 리엑트가 UI를 업데이트 함
	Hook> 	1) 컴포넌트 함수 안에서 바로 호출-> 첨포넌트 함수의 최상위에서 호출해야 함
			2) 다른 코드 안에서 중첩되면 안됨(내부 함수에서도 마찬가지)
	useState> const [counter,serCounter] = useState[0]		;
				counter : 현재 값
				setCounter : 1) 항상함수,상태를 업데이트하기 위해 실행(상태 값을 변경)-> 저장된 값을 업데이트
							 2) 속해있는 컴포넌트를 재실행
							 3) 상태를 업데이트 시키는 함수를 부를 때 react는 이 상태 업데이트의 스케줄을 조정하며
							 	컴포넌트 함수를 재실행 -> 컴포넌트 함수를 재실행하고 나서야 업데이트 값을 사용
								*>훅이 걸린 데이터가 변경되면 데이터에 대한 훅이 걸린 컴퍼넌트에 새 값을 전달하면서	
								  컴포넌트를 다시 렌더링 해줌->러닝 리엑트-락렉스 뱅크스 ,이브 포셀레 발췌
								  
<컴포넌트 합성>
	: 컴포넌트가 다른 컴포넌트나 내용을 감싸서 컴포넌트를 구축하는 것

1.Using "children"
<children Prop>
	: 컴포넌트 사이  내용 의미(필요에 따른 복잡한 jsx 구조, 단순 String 도 가능)
	

ex)
	*App Component
		<Modal>
			<h2>Warnning<h2>
			<p>Do you want to delete this file?</p>
		</Modal>
		
	*Modal Component
		1)	
			function Modal(props){
				return <div id='modal'>{props.children}</div>;
			}
			
		2)객체 구조 분해	
			function Modal({children}){
				return <div id='modal'>{children}</div>;
			}
			
2.Using Attributes
	*App Component
		<Modal label='Component'>
		</Modal>
		
	*Modal Component
		function Modal({label}){
			return <div id='modal'>{label}</div>;
		}
